{"version":3,"file":"VideoPlayer.js","sourceRoot":"","sources":["../src/VideoPlayer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useReleasingSharedObject } from 'expo-modules-core';\n\nimport NativeVideoModule from './NativeVideoModule';\nimport {\n  VideoSource,\n  VideoPlayer,\n  PipRestoreCallbacks,\n  PipRestoreDecision,\n} from './VideoPlayer.types';\nimport type {\n  PipRestoreRequestEventPayload,\n  PipRestoreCompletedEventPayload,\n  PipRestoreFailedEventPayload,\n} from './VideoPlayerEvents.types';\nimport resolveAssetSource from './resolveAssetSource';\n\n// Type extensions for PIP restoration methods\ninterface VideoPlayerWithPipCallbacks extends VideoPlayer {\n  _pipRestoreCallbacks?: PipRestoreCallbacks | null;\n}\n\ninterface NativeVideoModuleWithPipMethods {\n  setPipRestoreCallbacks?: (player: VideoPlayer, callbacks: PipRestoreCallbacks) => void;\n  clearPipRestoreCallbacks?: (player: VideoPlayer) => void;\n  respondToPipRestore?: (\n    player: VideoPlayer,\n    callbackId: string,\n    decision: PipRestoreDecision\n  ) => void;\n}\n\n// TODO: Temporary solution until we develop a way of overriding prototypes that won't break the lazy loading of the module.\nconst replace = NativeVideoModule.VideoPlayer.prototype.replace;\nNativeVideoModule.VideoPlayer.prototype.replace = function (\n  source: VideoSource,\n  disableWarning: boolean = false\n) {\n  if (!disableWarning) {\n    console.warn(\n      'On iOS `VideoPlayer.replace` loads the asset data synchronously on the main thread, which can lead to UI freezes and will be deprecated in a future release. Switch to `replaceAsync` for better user experience.'\n    );\n  }\n\n  return replace.call(this, parseSource(source));\n};\n\nconst replaceAsync = NativeVideoModule.VideoPlayer.prototype.replaceAsync;\nNativeVideoModule.VideoPlayer.prototype.replaceAsync = function (source: VideoSource) {\n  return replaceAsync.call(this, parseSource(source));\n};\n\n// Add PIP restoration callback management methods to the native VideoPlayer prototype\nNativeVideoModule.VideoPlayer.prototype.setPipRestoreCallbacks = function (\n  this: VideoPlayerWithPipCallbacks,\n  callbacks: PipRestoreCallbacks\n) {\n  // Store callbacks on the instance for JavaScript-side access\n  this._pipRestoreCallbacks = callbacks;\n\n  // Set up event listeners for PIP restoration events\n  this.addListener('onBeforePipRestore', async (event: PipRestoreRequestEventPayload) => {\n    const { context, callbackId } = event;\n\n    if (callbacks.onBeforePipRestore) {\n      try {\n        const decision = await callbacks.onBeforePipRestore(context);\n\n        // Send response back to native\n        const nativeModule = NativeVideoModule as typeof NativeVideoModule &\n          NativeVideoModuleWithPipMethods;\n        if (nativeModule.respondToPipRestore) {\n          nativeModule.respondToPipRestore(this, callbackId, decision);\n        }\n      } catch (error) {\n        console.error('Error in onBeforePipRestore callback:', error);\n\n        // Send rejection response on error\n        const nativeModule = NativeVideoModule as typeof NativeVideoModule &\n          NativeVideoModuleWithPipMethods;\n        if (nativeModule.respondToPipRestore) {\n          nativeModule.respondToPipRestore(this, callbackId, {\n            allowRestore: false,\n            metadata: { error: (error as Error).message },\n          });\n        }\n      }\n    }\n  });\n\n  this.addListener('onAfterPipRestore', (event: PipRestoreCompletedEventPayload) => {\n    if (callbacks.onAfterPipRestore) {\n      callbacks.onAfterPipRestore(event.context);\n    }\n  });\n\n  this.addListener('onPipRestoreFailed', (event: PipRestoreFailedEventPayload) => {\n    if (callbacks.onPipRestoreFailed) {\n      callbacks.onPipRestoreFailed(event.error);\n    }\n  });\n\n  // Call native method to register callbacks if platform supports it\n  const nativeModule = NativeVideoModule as typeof NativeVideoModule &\n    NativeVideoModuleWithPipMethods;\n  if (nativeModule.setPipRestoreCallbacks) {\n    return nativeModule.setPipRestoreCallbacks(this, callbacks);\n  }\n};\n\nNativeVideoModule.VideoPlayer.prototype.clearPipRestoreCallbacks = function (\n  this: VideoPlayerWithPipCallbacks\n) {\n  this._pipRestoreCallbacks = null;\n\n  // Call native method to clear callbacks if platform supports it\n  const nativeModule = NativeVideoModule as typeof NativeVideoModule &\n    NativeVideoModuleWithPipMethods;\n  if (nativeModule.clearPipRestoreCallbacks) {\n    return nativeModule.clearPipRestoreCallbacks(this);\n  }\n};\n\nNativeVideoModule.VideoPlayer.prototype.getPipRestoreCallbacks = function (\n  this: VideoPlayerWithPipCallbacks\n): PipRestoreCallbacks | null {\n  return this._pipRestoreCallbacks || null;\n};\n\n/**\n * Creates a direct instance of `VideoPlayer` that doesn't release automatically.\n *\n * > **info** For most use cases you should use the [`useVideoPlayer`](#usevideoplayer) hook instead. See the [Using the VideoPlayer Directly](#using-the-videoplayer-directly) section for more details.\n * @param source\n */\nexport function createVideoPlayer(source: VideoSource): VideoPlayer {\n  return new NativeVideoModule.VideoPlayer(parseSource(source));\n}\n\n/**\n * Creates a `VideoPlayer`, which will be automatically cleaned up when the component is unmounted.\n * @param source - A video source that is used to initialize the player.\n * @param setup - A function that allows setting up the player. It will run after the player is created.\n */\nexport function useVideoPlayer(\n  source: VideoSource,\n  setup?: (player: VideoPlayer) => void\n): VideoPlayer {\n  const parsedSource = parseSource(source);\n\n  return useReleasingSharedObject(() => {\n    const player = new NativeVideoModule.VideoPlayer(parsedSource);\n    setup?.(player);\n    return player;\n  }, [JSON.stringify(parsedSource)]);\n}\n\nfunction parseSource(source: VideoSource): VideoSource {\n  if (typeof source === 'number') {\n    // TODO(@kitten): This seems to not handle the `null` case. Is this correct?\n    return { uri: resolveAssetSource(source)!.uri };\n  } else if (typeof source === 'string') {\n    return { uri: source };\n  }\n\n  if (typeof source?.assetId === 'number' && !source.uri) {\n    // TODO(@kitten): This seems to not handle the `null` case. Is this correct?\n    return { ...source, uri: resolveAssetSource(source.assetId)!.uri };\n  }\n  return source;\n}\n"]}